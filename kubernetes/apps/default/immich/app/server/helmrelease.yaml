---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app immich-server
spec:
  interval: 30m
  chart:
    spec:
      # renovate: registryUrl=https://bjw-s.github.io/helm-charts/
      chart: app-template
      version: 3.7.3
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  maxHistory: 2
  install:
    timeout: 15m
    createNamespace: false
    remediation:
      retries: 3
  upgrade:
    timeout: 15m
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  # See https://github.com/bjw-s/helm-charts/blob/main/charts/library/common/values.yaml
  values:
    controllers:
      immich-server:
        annotations:
          reloader.stakater.com/auto: "true"

        pod:
          enableServiceLinks: false
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: immich-machine-learning
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: "kubernetes.io/arch"
                        operator: In
                        values: ["amd64"]

        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.130.3@sha256:eb5e28de53461e9c328d86fdccfddde579cf9b10ebb3105a2a194115b79ad8a9

            env:
              # General
              LOG_LEVEL: verbose
              IMMICH_MEDIA_LOCATION: &mediaLocation /usr/src/app/upload

            envFrom:
              - configMapRef:
                  name: immich-configmap
              - secretRef:
                  name: immich-secret

            resources:
              requests:
                cpu: 100m
                memory: 256Mi
                gpu.intel.com/i915: 1
              limits:
                memory: 4096Mi
                gpu.intel.com/i915: 1

            probes:
              liveness: &probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /server/ping
                    port: &port 2283
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probe
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /server/ping
                    port: *port
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 60

    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
            primary: true
          metrics:
            port: 8081

    serviceMonitor:
      app:
        serviceName: *app
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s

    ingress:
      app:
        enabled: true
        className: nginx
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: arcticons:immich
          hajimari.io/info: Manage Photos
          hajimari.io/group: media
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
          nginx.ingress.kubernetes.io/upstream-hash-by: "$client_ip"
        hosts:
          - host: &domain photos.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
        tls: []
      public:
        enabled: true
        className: nginx
        annotations:
          external-dns.alpha.kubernetes.io/target: "ingress.${PUBLIC_DOMAIN}"
          hajimari.io/enable: "false"
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
          nginx.ingress.kubernetes.io/upstream-hash-by: "$client_ip"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            sub_filter </head>
                '</head><script defer src="https://analytics.thiagoalmeida.xyz/script.js" data-website-id="086445c0-1f67-46c4-9246-bd1f74278421"></script>';
            sub_filter_once on;
        hosts:
          - host: &public-domain photos.${PUBLIC_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls: []

    persistence:
      library:
        type: nfs
        server: "${NFS_SERVER}"
        path: "${NFS_KUBERNETES}/immich"
        globalMounts:
          - path: *mediaLocation
