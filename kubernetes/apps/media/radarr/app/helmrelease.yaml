---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
  namespace: media
spec:
  interval: 15m
  chart:
    spec:
      # renovate: registryUrl=https://bjw-s.github.io/helm-charts/
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    controller:
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"
    image:
      repository: ghcr.io/onedr0p/radarr-develop
      tag: 5.10.2.9164@sha256:ba1f5bc94ef52ff57528fae56abce325841343b069d19aebbb420c20214a52e1

    env:
      TZ: ${TIMEZONE}
    envFrom:
      - secretRef:
          name: radarr-secret

    service:
      main:
        ports:
          http:
            port: 7878

    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: ${LOCAL_SUBNETS}
          hajimari.io/enable: "true"
          hajimari.io/icon: "filmstrip"
        hosts:
          - host: &host "radarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host

    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000

    persistence:
      config:
        enabled: true
        mountPath: /config
        type: custom
        volumeSpec:
          nfs:
            server: "${NFS_SERVER}"
            path: "${NFS_KUBERNETES}/radarr"

      torrents:
        enabled: true
        mountPath: /torrents
        type: custom
        volumeSpec:
          nfs:
            server: "${NFS_SERVER}"
            path: "${NFS_MEDIA}/torrents"

      downloads:
        enabled: true
        mountPath: /downloads
        type: custom
        volumeSpec:
          nfs:
            server: "${NFS_SERVER}"
            path: "${NFS_MEDIA}/downloads"

      movies:
        enabled: true
        mountPath: /movies
        type: custom
        volumeSpec:
          nfs:
            server: "${NFS_SERVER}"
            path: "${NFS_MEDIA}/movies"

    resources:
      requests:
        memory: 400Mi
        cpu: 15m
      limits:
        memory: 1Gi
