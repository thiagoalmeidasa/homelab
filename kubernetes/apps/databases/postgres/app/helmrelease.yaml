---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bitnami/charts/275b8af69ff830bd5cb6e02ad4d3839dfaa6c234/bitnami/postgresql/values.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: postgresql
  namespace: databases
spec:
  interval: 10m
  chart:
    spec:
      chart: postgresql
      version: 16.4.16
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      postgresql:
        auth:
          existingSecret: postgresql-secret
          database: main
      security:
        allowInsecureImages: true
    image:
      registry: ghcr.io
      repository: thiagoalmeidasa/bitnami-postgres-pgvecto-rs
      tag: 16.4.0-debian-12-r16@sha256:8050eecbcdac616d8ff6c9d0b9ecaff117fae219db34d1b7a8e53f92446599b1
    primary:
      persistence:
        enabled: true
        existingClaim: postgres16
        labels:
          recurring-job-group.longhorn.io/backup: enabled
      pdb:
        create: true
        minAvailable: 1
      resourcesPreset: "micro"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    backup:
      enabled: true
      cronjob:
        storage:
          storageClass: longhorn
          size: 40Gi
        command:
          - /bin/sh
          - -c
          - |
            BACKUP_DIR="$PGDUMP_DIR"
            BACKUPS_TO_KEEP=7

            echo "Current backups in $BACKUP_DIR:"
            ls -lh $BACKUP_DIR/pg_dumpall-*.pgdump

            pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers --no-password --file=$BACKUP_DIR/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump

            if [ $? -eq 0 ]; then
              echo "Backup created successfully."

              BACKUPS_TO_DELETE=$(ls -1t $BACKUP_DIR/pg_dumpall-*.pgdump | tail -n +$((BACKUPS_TO_KEEP+1)))

              if [ -n "$BACKUPS_TO_DELETE" ]; then
                echo "Deleting old backups:"
                echo "$BACKUPS_TO_DELETE"

                echo "$BACKUPS_TO_DELETE" | xargs -I {} rm -- {}
              else
                echo "No backups to delete."
              fi
            else
              echo "Backup creation failed. Old backups will not be deleted."
              exit 1
            fi
